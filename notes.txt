### Operational Excellence

# Ability to run and monitor systems to deliver business 
    * Organization - how Organization supports businses outcomes and teamates 
    * Prepare - review readiness of workloads and teams to make decisions when to go live
    * Operate - identify when Organization outcomes are at risk and respond
    * Evolve - Continuous improvement - feedback loops, learning, making improvements

## Traditional Environment 
* manual cheanges
* batch cheanges
* rarely run Game Days
* No time to learn from mistakes
* Stale documentation

## Vs Cloud
* Perform operations as code
* Make frequent, small, revesrible cheanges
* Refine operations procedures frequently
* Anticipate failure
* Learn from all operational failures

# common understanding of workloads
* set priorities and understand roles 
* understanding responsibility will maximize benefit
* support teammates in good orginzational culture


## Orginization
* understanding business needs
*Design telemetry - logs, events for understanding state
* Improve flow - limit issues that move forward, fix issues before procedures
* Mitigate deployment risks - rapid recovery
* Undrestand operational readiness - how team is ready to service the deployed product


## Prepare 
* multiple environemnts for experimentation - work in parallel without impacts
* security controls should increase as environemnts approach production
* when environments are not in use, turn them off

## Operate
* understanding workload health
* understanding operations health
* run books and playbooks to have consistent responses to events
* events observation of interest
* incident or a problem
* well defined response by playbook - external parties, like AWS support

## Evolve
* Learn from experience
* Make improvements
* Share learning across teams
* Encorporate feedback loops - identify areas for improvement
* prioritize and dirive improvements where needed
* begin on operations activities, customer experiences and business dev teams
* Recognize improvement




# Securtiy Pillar

*Focus on protecting systems, information and assets
* Identity and access management
* Detection
* Infrastructure protection
* Data protection
* Incident response

## Design Principles
* impliment a strong identity foundation
* use fine-grained access controls
* apply security at all layers
* automate security best practices
* prepare for security events and automation 

## Securely Operate
* organize workloads in separate accounts or common set of controls
* use AWS controls and orginzations
* set common gaurdrails to encourage best practices and automate certain tasks

### IAM policy
* AWS identity and access management 
* strong sign in mechanisms
* minimum password length
* centralizing identity provider
* AWS single sign on 
* automatic rotation like AWS secrets manager

Permissions
* manage permissions for human and machine identities
* clear definition of who has access to what
* gran least privilege 
* limit public and cross account access to only resources that require this access
* reduce permissions continuously 

## Amazon Cognito
* support muliple login providers
* unique users/devices
* helps implement security best practices

## Detective controls
* inventory assets and detailed attributes / lifecycle controls 
* internal auditing to examine controls
* automated alerting 

### Example
* automate playbook with AWS Config service - event is evoked against your rule and code is ran
* essentially your playbook is in code and will run automatically

## infrastructure protection
* define trust boundaries - network and account boundaries
* security Config
* operating systems
* firewalls and or API gateways
* enable people to perform actions at a distance

### Example
* control at all layers. is it accesible to AWS 
* use EDGE services
* divide amazon virtual private cloud into layers
* use all controls available

## use managed servicves
* customers can focus on securing more important aspects of workload
* managed service takes care of underlying instances or compute and therefore patching and hardening

## Data protection
* data classification if public or internal information only, or more restricted access like IP, marked senstiive
* Amazon Macy can help with this 
* KMS key management service
* Keep people away from data 
* provide a dashboard
* enforce encryption 

### Example
* encrypting data in transit and at rest

## Keep people away from Data
* provide a dashboard 
* use continous integration or continuyos deployment
* determine which controls and processes are required


## Incident response
* Easy way to gain access during incident 
* right predeployed tools
* conduct game days regularly to simulate security events

### Example
* create new trusted environment to conduct investigations
* isolated from other environemnts
* clean room 
* pre existing template 
* use AWS cloudformation to create a stack based on your template. 
* contsrtucts and configures your stack resources

* protecting information systems and assetts
* keeping root account credentials protected
* encrypting data at rest and in transit on AWS if applicable
* ensuring that only authorized authenticated users are able to acess your resources
* Using detective controls to detect or identify a security breach

# Reliability Pillar
* resiliency - ability of workload to recover from disruptions
* dynamically aquire computing resources to meet damnd
* mitigate disruptions

## Foundations
## Workload Architecutre
## Change management
## Failure Management

## Cloud environment
* automatically recover from failure
* test recovery procedures* scale horizontally to increase aggregate workload availability
* Stop guessing capacity
* Manage change in automation

## Network topology
* sufficient network bandwith to your data center

## Service quots or Service Limits
* limit request rates to protect abuse 
* amount of storage
* fixed limites or design contraints

## Service Oriented Architecutre (SOA)
* practice of making components reusable
* components smaller and simpler
* must act reliably 
* architecture design to prevent failures
* service oriented architecture or microserbvices
* architecture design to mitigate failures (limiting ques, throttling requests)

## Monitor workload 
* monitor behavior 
* AWS Amazon Simple Notification Service (SNS) control who has permissions, audit history
* Review key metrics closely  with automated responses 
* Amazon CloudWatch 

### Example
* automatic scaling
* EC2 instances which creates instances when you need it 

## Deployment 
* use runbooks 
* integrate testing as part of deployment
* use immutable infrastructure

## Withstand component failures 
* Automation to react to monitoring data 
* launch actions when threshold crossed
* analyze 
* backup data 
* recover processes

## Fault isolation 
* deploy workload to mulitple locations, distribute data across regions
* bulkhead architecture shards and cells 
* multiple availability zones

### Example 
* DR 
* defined objectives
* backup strategy 
* periodic recovery testing
* automated recovery 
* regular schedule or periodic reviews 
* assess system fitness 
* mitigate single points of failure 
* confident that you can recover all data  
* use playbooks
* test function and performance
* use chaos engineering, hypothesize how it will react to failure
* ensure this testing doesn't affect users 

## Key points 
* focus on resiliency how to recover from disruptions
* dynamically adapt to demand 
* Foundations - managing qyotas
* Workload Architecutre 
* Change Management 
* Failure Management 


# Performance Efficiency Pillar 
* Revolves around IT efficiency 
* Selection 
* Review 
* Monitoring 
* Trade-offs 

## Cloud environment 
* try new tech 
* go global in minutes 
* use serverless architecutres 
* experiment more often 
* consider mechanical sympathy 

## Selection 
* appropriate resource types 
* benchmark and load test 
* monitor perfromance 

## Appropriate resources
* select appropriate resource
* improve performance 
* compute storage database and networking resources 
* load testing 
* cost / budget
* monitoring and Notification 

### Example 
* load testing - AWS CloudFormation to define your architecture as code 
* production scale test 
* experiment with features ina low risk way 
* terminate when done 
* low cost 

## Monitoring 
*use automation to work around performance issues by launching actions through 
* amazong cloudwatch, amazon kinesis, amazon simple que service, AwS Lambda

### Example 
* Performance alarms 
* automated action to work around badly performing components 

## Trade-offs 
* trade off where space is used to reduce processing time 
* positions resources 
* add read only replicas 
* collect and evaluate 
* measure impact to see how trade offs impact performance 
* load testing 

### Example 
* proximity and chacheing mechanisms 
* Amazon CloudFront to cahce content closer to user 
* Amazon Elasticache 
* Amazon RDS replicas (sometimes the easiest)

# Cost Optimization Pillar 

## ability to achieve outcomes at lowest pricepoint 
* Practice Cloud Financial Management 
* Expenditure and usage awareness 
* Cost-effective resources 
* Manage demand and supply resources 
* Optimize over time 

## Cloud 
* Implement cloud financial management
* pay only for the consumption - adopt a consumption model
* Measure overall efficiency 
* Stop spending money on undifferentiated heavy lifting 
* Analtze and attribute expenditure 

## Cost effective resources 
* use most effective resources 
* managed services 

## Pricing Model 
* on demand instance - pay by hour no long term demand 
* savings plans and reserved instances 
* spot instances up to 6 hours 

## Services 
* Amazon RDS 
* Redshift 
* CloudFormation 
* Elasticsearch Service 
* take advantage of managed AWS services 
* consider application - level services 
* automation can reduce costs 
* analyze available services 

## Manage suply and demand resources 
* modify demand with throttle or buffer
* Resource provisioning to match demand 
* AWS auto scaling 
* monitoring toools 
* benchamrking 

## Example 
* manage demand and supply with the right amount of resources 
* supply the right amount of resrouces through AWS atuco scaling demand based or time based

## Expenditure awareness 
* accurate cost attribution allows you to understand cost 
* tag resources 
* track project lifecycle and profile applications 
* monitor usage and spend 
* use AWS cost explorer 
* use partner tools

## AWS Cost Explorer 
* see which services you see most 
* which zones most traffic 

## Optimizing over time 
* Decommission resources or services you no longer require 
* AWS whats new block - stay up to date on new services and features 

## AWS Blog 
* identify new features 

## Key Points 
* Abodingin unneeded cost or suboptimal resources 
* Measuring overall workload efficiency
* Managing demand and supply resources 
* Using saving plans to reduce cost 
* Measuring overall efficiency 
* Learning about new services and features 


## Introduction 
* Review Process 
* Consistency 
* Technology portfolio

## What is a well architected review? 
* Provides customers and partners with a consistent approach to reviewing their 
workloads against current best practices and gives adivce on how to architect 
workloads for the cloud using 5 pillars 

## Intent 
* way to work together to improve 
* pragmatic proven advice that works 
* do throughout product lifecycle 

## Review learnings
* Earlier is better 
* not considered decisions 
* most workloads can be improved 

* Buildd and deploy faster 
* lower or mitigate risks 
* make informed decisions 
* learn AWS best practices 

* Framework whitepaper 
* Pillar specific whitepapers 
* free online training 

## partners
* get a freww review 
* review results 
* approve SOW within 30 days to receive 5k in AWS credit

## Improve architecutres 
## Leverage resources that are well available to you on site

# AWS Well Architected Tool 
* provides customers and partners with consistent approach to reviewing their atchitures against best AWS practices 
*Learn measure and improve against best practices 
* using five pillars 

## Workload 
* a collection of AWS resources and code that delivers business value 


## Milestones 
* record progress 
* Design Time 
* Runtime 

## Features 
* define workloads and perform reviews 
* locate helpful resources 
* save milstones 
* use dashboard 
* generate PDF reports 
* assign priorities to pillars 
* Create Improvement Plan 


